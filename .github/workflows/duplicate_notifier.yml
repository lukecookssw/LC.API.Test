name: Notify Closed Duplicates

on:
  # Trigger when an issue is closed (the master issue is closed)
  issues:
    types: [closed]

jobs:
  notify-duplicates:
    # Only proceed if the master issue is closed
    if: github.event.issue.state == 'closed'
    
    runs-on: ubuntu-latest
    
    steps:
      - name: üîç Find Closed Duplicate Issues using GraphQL
        id: find_duplicates
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const masterIssueNumber = context.payload.issue.number;
            const repo = context.repo;
            const duplicates = [];

            // The correct GraphQL query targeting the MarkedAsDuplicateEvent
            const query = `
              query GetMarkedDuplicates($owner: String!, $repo: String!, $issueNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $issueNumber) {
                    timelineItems(itemTypes: [MARKED_AS_DUPLICATE_EVENT], first: 100) {
                      nodes {
                        ... on MarkedAsDuplicateEvent {
                          duplicate {
                            ... on Issue {
                              number
                              state
                              url
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            // Execute the GraphQL query
            const result = await github.graphql(query, {
              owner: repo.owner,
              repo: repo.repo,
              issueNumber: masterIssueNumber
            });

            const timelineNodes = result.repository.issue.timelineItems.nodes;
            console.log(`Found ${timelineNodes.length} 'Marked as Duplicate' events on the master issue's timeline.`);

            // Process the results and filter
            for (const node of timelineNodes) {
              // The duplicate object contains the details of the issue closed as a duplicate
              const duplicateIssue = node.duplicate;

              // 1. Check if the duplicate object is an Issue
              // 2. Check if the duplicate Issue is also CLOSED (it almost always will be, but this is robust)
              if (duplicateIssue && duplicateIssue.number && duplicateIssue.state === 'CLOSED') {
                console.log(`Duplicate issue found: #${duplicateIssue.number}`);
                duplicates.push(duplicateIssue.number);
              }
            }
            
            // Output the list of duplicates for the next step
            const joinedDuplicates = duplicates.join(', ');
            console.log(`Joined dupes: ${joinedDuplicates}`);
            core.setOutput('duplicate_issue_numbers', joinedDuplicates);

      - name: üí¨ Add Comment to Duplicates
        uses: actions/github-script@v7
        env:
          DUPLICATE_ISSUE_NUMBERS: ${{ steps.find_duplicates.outputs.duplicate_issue_numbers }}
        # Only run this step if duplicates were found
        if: steps.find_duplicates.outputs.duplicate_issue_numbers != ''
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            
            const duplicateIssueNumbers = process.env.DUPLICATE_ISSUE_NUMBERS.split(',');
            console.log('Duplicate issue numbers to process: ' + duplicateIssueNumbers);
            console.log('Number of duplicate issues: ' + duplicateIssueNumbers.length);
            const masterIssueNumber = context.payload.issue.number;
            const repo = context.repo;
            const commentBody = `Hey! This issue was fixed! üéâ The issue was marked as a duplicate, and the fix was tracked in the master issue: **#${masterIssueNumber}**`;

            console.log(`Attempting to comment on ${duplicateIssueNumbers.length} duplicate issue(s).`);

            // Loop through the duplicate issues and add a comment to each
            for (const issueNumberString of duplicateIssueNumbers) {
              console.log('processing issue number string: ' + issueNumberString);
              const issueNumber = parseInt(issueNumberString, 10);
              console.log('parsed issue number: ' + issueNumber);
              if (!isNaN(issueNumber)) { // Guard against invalid number
                try {
                console.log('creating a comment on issue #' + issueNumber);
                console.log('owner: ' + repo.owner);
                console.log('repo: ' + repo.repo);
                console.log('body: ' + commentBody);
                  await github.rest.issues.createComment({
                    owner: repo.owner,
                    repo: repo.repo,
                    issue_number: issueNumber,
                    body: commentBody
                  });
                  console.log(`Successfully commented on #${issueNumber}`);
                } catch (error) {
                  console.error(`Failed to comment on #${issueNumber}. Error: ${error.message}`);
                }
              }
            }