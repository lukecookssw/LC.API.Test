name: Notify Closed Duplicates

on:
  # 1. Trigger when an issue is closed
  issues:
    types: [closed]

jobs:
  notify-duplicates:
    # 2. Only run if the closure comment or context indicates a fix was applied
    # This is a critical safety check: we only want to notify if the master issue 
    # was closed because the problem was FIXED, not for other reasons.
    # We can check the closure reason (if provided by a PR) or a label.
    # For simplicity here, we assume if it's closed, it's fixed.
    # For a stricter check, you might inspect the closing pull request or labels.
    if: github.event.issue.state == 'closed'
    
    runs-on: ubuntu-latest
    
    steps:
      - name: üîç Find Closed Duplicate Issues
        id: find_duplicates
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const masterIssueNumber = context.payload.issue.number;
            const repo = context.repo;
            const duplicates = [];

            // GraphQL Query to get the timeline of the master issue.
            // We look for CROSS_REFERENCED_EVENTs, which means another issue 
            // mentioned the master issue (a common pattern for duplicates).
            const query = `
              query ($owner: String!, $repo: String!, $issueNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $issueNumber) {
                    timelineItems(itemTypes: [CROSS_REFERENCED_EVENT], first: 100) {
                      nodes {
                        ... on CrossReferencedEvent {
                          source {
                            ... on Issue {
                              number
                              state
                            }
                          }
                          isCrossRepository
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const result = await github.graphql(query, {
              owner: repo.owner,
              repo: repo.repo,
              issueNumber: masterIssueNumber
            });

            console.log(`Found ${result.repository.issue.timelineItems.nodes.length} cross-references.`);

            // Process the results
            for (const item of result.repository.issue.timelineItems.nodes) {
              const source = item.source;
              // 1. Ensure the reference source is an Issue (not a Pull Request)
              // 2. Ensure the source issue is CLOSED (i.e., it was closed as a duplicate)
              // 3. Ensure it's not the master issue itself
              if (source && source.number !== masterIssueNumber && source.state === 'CLOSED') {
                console.log(`Potential duplicate found: #${source.number}`);
                // In a real-world scenario, you might add logic here to check for 
                // a 'duplicate' label or a specific closing comment on the source issue 
                // to be 100% sure it was closed AS a duplicate.
                duplicates.push(source.number);
              }
            }
            
            // Output the list of duplicates for the next step
            core.setOutput('duplicate_issue_numbers', duplicates.join(','));


      - name: üí¨ Add Comment to Duplicates
        uses: actions/github-script@v7
        # 3. Only run this step if duplicates were found
        if: steps.find_duplicates.outputs.duplicate_issue_numbers != ''
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const duplicateIssueNumbers = core.getInput('duplicate_issue_numbers').split(',');
            const masterIssueNumber = context.payload.issue.number;
            const repo = context.repo;
            const commentBody = `Hey! This issue was fixed! üéâ\n\nThe fix was tracked in the master issue: **#${masterIssueNumber}**`;

            console.log(`Adding comment to ${duplicateIssueNumbers.length} duplicate issues.`);

            // Loop through the duplicate issues and add a comment to each
            for (const issueNumber of duplicateIssueNumbers) {
              if (issueNumber) { // Guard against empty string from split
                try {
                  await github.rest.issues.createComment({
                    owner: repo.owner,
                    repo: repo.repo,
                    issue_number: parseInt(issueNumber),
                    body: commentBody
                  });
                  console.log(`Successfully commented on #${issueNumber}`);
                } catch (error) {
                  console.error(`Failed to comment on #${issueNumber}: ${error.message}`);
                }
              }
            }